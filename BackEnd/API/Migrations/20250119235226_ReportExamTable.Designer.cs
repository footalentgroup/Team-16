// <auto-generated />
using System;
using API.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250119235226_ReportExamTable")]
    partial class ReportExamTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.DataBase.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            LastName = "admin1",
                            Name = "admin1",
                            Password = "$2a$11$VtfTkNf7kghc7N/tQertZ.QZzRUopjdP2kvtBM.J9nRGnnVp99y8K"
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin2@gmail.com",
                            LastName = "admin2",
                            Name = "admin2",
                            Password = "$2a$11$kVarQSgLVX2UjLuxkXmnEOus4m9E.QhpL3svIA6Jqbjn2Grcz6aga"
                        });
                });

            modelBuilder.Entity("API.DataBase.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastName = "Doe",
                            Name = "John",
                            Registration = "REG12345",
                            Title = ""
                        },
                        new
                        {
                            Id = 2,
                            LastName = "Smith",
                            Name = "Jane",
                            Registration = "REG54321",
                            Title = ""
                        },
                        new
                        {
                            Id = 3,
                            LastName = "juanes",
                            Name = "Jennifer",
                            Registration = "REG44534",
                            Title = ""
                        });
                });

            modelBuilder.Entity("API.DataBase.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sample")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("API.DataBase.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateExam")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("API.DataBase.Entities.OrderExam", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("OrderExam");
                });

            modelBuilder.Entity("API.DataBase.Entities.ParameterBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Parameters");

                    b.HasDiscriminator<string>("Type").HasValue("ParameterBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.DataBase.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonalIDType")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonalID")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Marcos@gmail.com",
                            FirstName = "Marcos",
                            LastName = "Rodriguez",
                            Password = "$2a$11$kTX.cz6YSvlN4NNgCvJGzObdaGaS5yan5Evqr/a69ShJDha20OMOS",
                            PersonalID = "34098349",
                            PersonalIDType = 0,
                            Phone = "+54934245673748"
                        },
                        new
                        {
                            Id = 2,
                            Birth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Marcos@gmail.com",
                            FirstName = "Marcos",
                            LastName = "Rodriguez",
                            Password = "$2a$11$7J9QIwtrade6SiB29qFNCO9lqwHtMarYoUEphtfFkrA.I/3mscQTa",
                            PersonalID = "49298349",
                            PersonalIDType = 0,
                            Phone = "+54934245673748"
                        },
                        new
                        {
                            Id = 3,
                            Birth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Marcos@gmail.com",
                            FirstName = "Marcos",
                            LastName = "Rodriguez",
                            Password = "$2a$11$5QVfAytSzIo0gBpWiMBj0OtK0PMrImDTds2f4xId9BVymAD/wi3Cy",
                            PersonalID = "AA34098349",
                            PersonalIDType = 1,
                            Phone = "+54934245673748"
                        });
                });

            modelBuilder.Entity("API.DataBase.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateResult")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ParameterId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParameterId");

                    b.ToTable("Results");

                    b.HasDiscriminator<string>("Type").HasValue("Result");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.DataBase.Entities.QualitativeParameter", b =>
                {
                    b.HasBaseType("API.DataBase.Entities.ParameterBase");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("qualitative");
                });

            modelBuilder.Entity("API.DataBase.Entities.QuantitativeParameter", b =>
                {
                    b.HasBaseType("API.DataBase.Entities.ParameterBase");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<double>("MaxValue")
                        .HasColumnType("double precision");

                    b.Property<double>("MinValue")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("quantitative");
                });

            modelBuilder.Entity("API.DataBase.Entities.QualitativeResult", b =>
                {
                    b.HasBaseType("API.DataBase.Entities.Result");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Results", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("QualitativeResult_Value");
                        });

                    b.HasDiscriminator().HasValue("qualitative");
                });

            modelBuilder.Entity("API.DataBase.Entities.QuantitativeResult", b =>
                {
                    b.HasBaseType("API.DataBase.Entities.Result");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("quantitative");
                });

            modelBuilder.Entity("API.DataBase.Entities.Order", b =>
                {
                    b.HasOne("API.DataBase.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("API.DataBase.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("API.DataBase.Entities.OrderExam", b =>
                {
                    b.HasOne("API.DataBase.Entities.Exam", "Exam")
                        .WithMany("OrderExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.DataBase.Entities.Order", "Order")
                        .WithMany("OrderExams")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.DataBase.Entities.ParameterBase", b =>
                {
                    b.HasOne("API.DataBase.Entities.Exam", "Exam")
                        .WithMany("Parameters")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("API.DataBase.Entities.Result", b =>
                {
                    b.HasOne("API.DataBase.Entities.Order", "Order")
                        .WithMany("Results")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.DataBase.Entities.ParameterBase", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("API.DataBase.Entities.Exam", b =>
                {
                    b.Navigation("OrderExams");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("API.DataBase.Entities.Order", b =>
                {
                    b.Navigation("OrderExams");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
